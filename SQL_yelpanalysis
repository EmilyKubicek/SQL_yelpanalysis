## Profiling and Analyzing the Yelp (U.S.) Dataset with SQLite

Part 1: Profile and understand the data
Part 2: Inferences and analysis for a research question


Part 1: Yelp Dataset Profiling and Understanding

1. Total number of records for each of the tables in the relational database:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records (foreign key or primary key) for each table:

i. Business = 10000
ii. Hours (foreign key = hours) = 2052
iii. Category (business_id) = 2643
iv. Attribute (business_id) = 1115
v. Review = 10000
vi. Checkin (business_id) = 493
vii. Photo = 10000
viii. Tip = 537
ix. User = 10000
x. Friend (user_id) = 11
xi. Elite_years (user_id) = 2780


3. Check for NULLs in columns:

	No nulls in any column.
	
	
	SQL code used to arrive at answer:

	SELECT COUNT(*)
	FROM user 
	WHERE (name 
	OR review_count 
	OR compliment_photos 
	OR useful
	OR funny
	OR cool
	OR fans
	OR average_stars
	OR compliment_hot
	OR compliment_more
	OR compliment_profile
	OR compliment_cute
	OR compliment_list
	OR compliment_note
	OR compliment_plain
	OR compliment_cool
	OR compliment_funny
	OR compliment_writer
	OR compliment_photos) IS NULL;
	
	

	
4. Summary stats for columns in various tables in the relational database:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

	SELECT city,
	sum(review_count) as cityreviewcounts
	FROM business
	GROUP BY city
	ORDER BY cityreviewcounts DESC
	
	
	Result (copy/pasted):

	| city            | cityreviewcounts |
	+-----------------+------------------+
	| Las Vegas       |            82854 |
	| Phoenix         |            34503 |
	| Toronto         |            24113 |
	| Scottsdale      |            20614 |
	| Charlotte       |            12523 |
	| Henderson       |            10871 |
	| Tempe           |            10504 |

	
6. Distribution of star ratings to the business in select cities:

i. Avon

SQL code used to arrive at answer:

-- We are interested in stars and how many
SELECT stars,
COUNT(DISTINCT id)
FROM business 

-- Indicate what city we are interested in
WHERE city = 'Avon' 
GROUP BY stars;

Resulting Table:
+-------+--------------------+
| stars | COUNT(DISTINCT id) |
+-------+--------------------+
|   1.5 |                  1 |
|   2.5 |                  2 |
|   3.5 |                  3 |
|   4.0 |                  2 |
|   4.5 |                  1 |
|   5.0 |                  1 |
+-------+--------------------+

ii. Beachwood

SQL code used to arrive at answer:

-- use same as above but change city
SELECT stars,
COUNT(DISTINCT id)
FROM business 
WHERE city = 'Beachwood' 
GROUP BY stars;

Resulting Table:
+-------+--------------------+
| stars | COUNT(DISTINCT id) |
+-------+--------------------+
|   2.0 |                  1 |
|   2.5 |                  1 |
|   3.0 |                  2 |
|   3.5 |                  2 |
|   4.0 |                  1 |
|   4.5 |                  2 |
|   5.0 |                  5 |
+-------+--------------------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	-- we are interested in id, name, and review_count
	SELECT id, name,
	review_count
	FROM user
	
	-- order logically for our question/readability
	ORDER BY review_count DESC
		
	Copy and Paste the Result Below:
	+------------------------+-----------+--------------+
	| id                     | name      | review_count |
	+------------------------+-----------+--------------+
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |         2000 |
	| -3s52C4zL_DHRK0ULG6qtg | Sara      |         1629 |
	| -8lbUNlXVSoXqaRRiHiSNg | Yuri      |         1339 |


8. Does posing more reviews relate to havinng more fans?

	When examining the review counts of users we can see that those with the
	highest number of fans are not necessarily those with the highest review counts.
	It's difficult to say for sure though, because those with 1 or zero reviews very
	understandably have no fans, so that would likely drive a strong legitimate 
	correlation analysis. In order to explore this correctly, exporting the data to
	python to do a correlation analysis would be the best option.

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: love = 1780, hate = 232

	SQL code used to arrive at answer:

	-- count how many times the word appears in reviews
	SELECT COUNT (DISTINCT text)
	FROM review
	WHERE text LIKE '%love%'

	-- same as above but with different word
	SELECT COUNT (DISTINCT text)
	FROM review
	WHERE text LIKE '%hate%';
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

	-- find top ten (fans)
	SELECT id,
	name,
	fans
	FROM user
	ORDER BY fans DESC
	
	Copy and Paste the Result Below:
	+------------------------+-----------+------+
	| id                     | name      | fans |
	+------------------------+-----------+------+
	| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
	| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
	| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
	| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
	| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
	| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
	| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
	| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
	| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
	+------------------------+-----------+------+
	
	
11. Is there a strong relationship (or correlation) between having a high number of fans and being listed as "useful" or "funny?" Out of the top 10 users with the highest number of fans, what percent are also listed as “useful” or “funny”?

Suggested key:
0% - 25% - Low relationship
26% - 75% - Medium relationship
76% - 100% - Strong relationship
	
	SQL code:	
	-- Examine top ten users with the highest number of fans
	SELECT id,
	name,
	fans,
	useful,
	funny,
	review_count
	FROM user
	ORDER BY fans DESC
	LIMIT 10;

	-- Examine top ten users with the highest number of 'useful' or 'funny' comments
	SELECT id,
	name,
	fans,
	useful,
	funny,
	review_count
	FROM user
	ORDER BY useful DESC
	LIMIT 10

	-- Examine top ten users with the highest number of 'funny' comments
	SELECT id,
	name,
	fans,
	useful,
	funny,
	review_count
	FROM user
	ORDER BY funny DESC
	LIMIT 10
	
	Results:
	
	-- Those with top ten fans
	+------------------------+-----------+------+--------+--------+--------------+
	| id                     | name      | fans | useful |  funny | review_count |
	+------------------------+-----------+------+--------+--------+--------------+
	| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |   3226 |   2554 |          609 |
	| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |    257 |    138 |          968 |
	| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 | 122921 | 122419 |         1153 |
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |  17524 |   2324 |         2000 |
	| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |   4834 |   6646 |          930 |
	| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |     48 |     13 |          813 |
	| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |   1062 |    672 |          377 |
	| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |   9363 |   9361 |         1215 |
	| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |   9851 |   7606 |          862 |
	| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |    455 |    150 |          834 |
	+------------------------+-----------+------+--------+--------+--------------+
	
	-- Those with top ten useful comments
	+------------------------+-----------+------+--------+--------+--------------+
	| id                     | name      | fans | useful |  funny | review_count |
	+------------------------+-----------+------+--------+--------+--------------+
	| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 | 122921 | 122419 |         1153 |
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |  17524 |   2324 |         2000 |
	| -0-DbdhS2CIoq7cfuSzQ2w | Susie     |   24 |  14703 |   3823 |          272 |
	| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |   9851 |   7606 |          862 |
	| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |   9363 |   9361 |         1215 |
	| -K2Tcgh2EKX6e6HqqIrBIQ | .Hon      |  101 |   7850 |   5851 |         1246 |
	| -BevLRnJhh9JeIT2g5I3mQ | W         |    4 |   6974 |   6033 |          198 |
	| -dccg5dCgQRh8ObtNvrj3g | Alan      |   44 |   5640 |   4567 |           80 |
	| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |   4834 |   6646 |          930 |
	| -5P_HpvpjamXTVqYM9gN_g | Mike      |   65 |   4656 |    301 |          346 |
	+------------------------+-----------+------+--------+--------+--------------+

	-- Those with top ten funny comments
	+------------------------+-----------+------+--------+--------+--------------+
	| id                     | name      | fans | useful |  funny | review_count |
	+------------------------+-----------+------+--------+--------+--------------+
	| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 | 122921 | 122419 |         1153 |
	| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |   9363 |   9361 |         1215 |
	| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |   9851 |   7606 |          862 |
	| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |   4834 |   6646 |          930 |
	| -BevLRnJhh9JeIT2g5I3mQ | W         |    4 |   6974 |   6033 |          198 |
	| -K2Tcgh2EKX6e6HqqIrBIQ | .Hon      |  101 |   7850 |   5851 |         1246 |
	| -dccg5dCgQRh8ObtNvrj3g | Alan      |   44 |   5640 |   4567 |           80 |
	| -0-DbdhS2CIoq7cfuSzQ2w | Susie     |   24 |  14703 |   3823 |          272 |
	| --56mD0sm1eOogphi2FFLw | Jen       |   39 |   3111 |   3164 |          211 |
	| -0SqALqeWmInVftG_iHcHg | Jim       |   57 |   3881 |   2913 |          671 |
	+------------------------+-----------+------+--------+--------+--------------+
	
	Findings/interpretation of the results:
	We start by first extracting the top ten users with the most fans. Then we see how
	many times those users appear in the top ten for each 'useful' or 'funny' users. We found
	That 5 of the the top ten users with the most fans (Harold, Gerold, Christine, William, Fran)
	are also in the top ten for either being 'useful' or 'funny'. According to the key provided, 
	this means there is a medium relationship between having alot of fans and being 'useful' or 'funny.'
	An additional analysis that would be useful in python would be a sentiment analysis (quantifying 
	use of woords) and use that for a correlation analysis.

Part 2: Inferences and Analysis

1. Group businesses in city or category by overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
If we are looking at business name and city, we can see that those with higher stars (4-5) are medical centers and sit down restaurants. The medical places are open early into the morning, likely to accomodate the Las Vegas staying up late. When looking at the 2-3 star places, they actually have similar hours late into the mornings, but they are more quick service locations (i.e. WingStop, Walgreens).

ii. Do the two groups you chose to analyze have a different number of reviews?
The groups that have 4-5 star ratings have 1042 reviews, while the 2-3 star ratings have 245 reviews.
         
iii. Can we infer anything from the location data provided between these two groups?
When looking at neighborhood data we can see that places in 'Southeast' has 3.5-4 stars and close in the afternoon or early evening. We also see that the business with the highest number of reviews is a Chinese restaurant in Chinatown. Looking at further analyses such as sentiment analysis on the reviews (in python) could tell us if it is mostly tourists or locals (or both) frequenting this establishment, and thus provide poossible insight for marketing.


SQL code:

-- make columns each variable we are interested inn
SELECT b.city,
b.name,
h.hours,
b.stars,
b.review_count,
b.neighborhood
FROM business b, hours h

-- join to use information in both tables
WHERE b.id = h.business_id AND city = 'Las Vegas'

-- readability/clarity
GROUP BY b.name


2. Group business based on the ones that are open and the ones that are closed. What differences are there between the ones that are still open and the ones that are closed? 

	
i. Difference 1:
is open = 8480
is closed = 1520
         
ii. Difference 2:
I see a lot of places that are not open are restaurants (by examining the category , which is interesting. It's possible that the market is saturated with restaurants, and thus more difficult to keep open. The 'open' businesses provide a wider variety of business types, suggesting that if you want to go into business, maybe you should do so not in a restaurant and/or a very unique restaurant to drive business up.*
*difference 2 observed after joining with 'category' table. See code below         
         
SQL code:
-- Count business that are open
SELECT count(is_open)
FROM business
WHERE is_open = 1

-- Count businesses that are closed
SELECT count(is_open)
FROM business
WHERE is_open = 0

-- Look at open/closed by category
-- Is open
SELECT b.name, 
c.category,
b.is_open
FROM category AS c, business AS b
WHERE c.business_id = b.id AND is_open = 1
GROUP BY b.name

-- Is closed
SELECT b.name, 
c.category,
b.is_open
FROM category AS c, business AS b
WHERE c.business_id = b.id AND is_open = 1
GROUP BY b.name
	
	
3. Choose an anlysiss to conduct with the Yelp dataset and prepare the data for analysis.

i. Anlysis type:
The analysis I would like to do is parse out keywords and find business attributes for sentiment analysis
for vegan options at restaurants.
         
ii. Type of data I need and why:

For this analysis I will need the reviews from the Yelp dataset, particularly from restaurants. I chose this
data set because veganism is becoming a larger and larger market for restaurants, even those that are
not created for the vegan population. Although a business may not particularly want to serve this population, it remains that vegan patrons will go to their restaurants and rate/review them. 

By doing sentiment analysis on the reviews for negative/positive emotion, we will be able to see
what customers appreciate about the vegan options, employee knowledge of ingredients, and possibly
lack of vegan knowledge and options. In the final result we will see if those restaurants with higher ratings do have more options or stay true to their original menu purpose. This will assist new restaurants in deciding how to cater to populations with different diets (i.e. menu options, training employees).

                 
iii. Output [1,:] of created data set:
+-------+------------------------+---------------------------------------------------------------------------------------+
| stars | business_id            | text                                                                                   
+-------+------------------------+---------------------------------------------------------------------------------------+
|     4 | --4aCc43T0_g960EaIRf-w | I was soooo happy when i open the menu and there was a vegan/vegetarian page.               +-------+------------------------+---------------------------------------------------------------------------------------+                                                                                                                                   

iv. SQL code:

-- Extract text with business id
SELECT review.stars, review.id as business_id, text
	FROM review
	LEFT JOIN business ON review.id = business.id
WHERE text LIKE '%vegan%'
ORDER BY name
